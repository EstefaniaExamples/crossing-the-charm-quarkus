version: '3.7'
services:
  postgres-springbootimperativejdbcapi:
    image: postgres:latest
    command: postgres -c 'max_connections=200'
    network_mode: bridge
    container_name: postgres-springbootimperativejdbcapi
    volumes:
      - ../../infrastructure/db-init/setup.sh:/docker-entrypoint-initdb.d/initdb.sh
      - postgres_data:/var/lib/postgresql/data
    expose:
      - 5485
    ports:
      - 5485:5432
    environment:
      - POSTGRES_PASSWORD=book
      - POSTGRES_USER=book
      - POSTGRES_DB=books_database
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  springbootimperativejdbcapi:
    image: 'docker.io/library/sb-imperative-jdbc-api:1.0-SNAPSHOT'
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 2048MB
        reservations:
          cpus: 0.5
          memory: 256MB
    network_mode: bridge
    container_name: springbootimperativejdbcapi
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://192.168.2.49:5485/books_database?createDatabaseIfNotExist=true
    expose:
      - 8085
    ports:
      - 8085:8085
    restart: unless-stopped
    depends_on:
      - postgres-springbootimperativejdbcapi

  springbootimperativejdbcapi-jvm:
    image: 'docker.io/library/sb-imperative-jdbc-api-jvm:1.0-SNAPSHOT'
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 2048MB
        reservations:
          cpus: 0.5
          memory: 256MB
    network_mode: bridge
    container_name: springbootimperativejdbcapi-jvm
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://192.168.2.49:5485/books_database?createDatabaseIfNotExist=true
    expose:
      - 8085
    ports:
      - 8095:8085
    restart: unless-stopped
    depends_on:
      - postgres-springbootimperativejdbcapi

volumes:
  postgres_data:
